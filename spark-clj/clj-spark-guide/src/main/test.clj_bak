(ns test
  (:require [sparkling.conf :as conf]
            [sparkling.core :as spark]
            [clojure.string :as str]))

;; Create a Spark context and give it a name
; (def c (-> (conf/spark-conf) ; create a new config
;            (conf/master "local[*]") ; set the master
;            (conf/app-name "clj-spark-guide"))) ; set the app name
; (def sc (spark/spark-context c))

; ;; Create a dataset
; (def data (spark/parallelize sc ["a" "b" "a" "d" "a"]))

; ;; Get the first element of the dataset
; (spark/first data)

; ;; Get the number of elements in the dataset
; (spark/count (spark/filter #(= "a" %) data));

; (def rm-data (spark/text-file sc "src/main/resources/README.md"))
; (->> rm-data
;     ;  (spark/map count)
;    	;  (spark/reduce +)
;      (spark/filter #(str/includes? % "v"))
;      (spark/count))

; (->> rm-data
;      (spark/map (fn [line]
;                   (count (str/split line #"\s"))))
;      (spark/reduce #(if (> %1 %2) %1 %2)))

; (def line-spark
;   (->> rm-data
;        (spark/filter #(str/includes? % "Spark"))))
#_(->> rm-data
       (spark/flat-map (fn [line]
                         (count (str/split line #"\s"))))
       (spark/group-by-key)
       (spark/count))

;;(spark/cache line-spark)

;;(spark/count line-spark)